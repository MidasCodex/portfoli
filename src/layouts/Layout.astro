---
import '../styles/globals.css';

const { title = 'Ibrahim Nawir — Portfolio', description = 'Designer & Frontend Engineer building clean, thoughtful products' } = Astro.props;
const year = new Date().getFullYear();
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="theme-color" content="#FF8E72" />
    <meta name="color-scheme" content="light" />
    
    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/og-image.png" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <title>{title}</title>

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400..800&family=Fraunces:opsz,wght@9..144,300..900&display=swap" rel="stylesheet" />
  </head>
  <body>
    <header class="site-header">
      <div class="container header-inner">
        <a class="brand" href="/" aria-label="Home">
          <span class="brand-icon">✦</span>
          <span class="brand-text">Portfolio</span>
        </a>
        
        <!-- Desktop Nav -->
        <nav class="nav" aria-label="Primary">
          <a href="/#work">Work</a>
          <a href="/#about">About</a>
          <a href="/#contact">Contact</a>
        </nav>
        
        
        <!-- Mobile Menu Button -->
        <button class="mobile-menu-btn" aria-label="Menu" aria-expanded="false">
          <span class="menu-icon">
            <span></span>
            <span></span>
            <span></span>
          </span>
        </button>
      </div>
      
      <!-- Mobile Nav -->
      <nav class="nav mobile-nav" aria-label="Mobile navigation">
        <a href="/#work" class="mobile-nav-link">Work</a>
        <a href="/#about" class="mobile-nav-link">About</a>
        <a href="/#contact" class="mobile-nav-link">Contact</a>
      </nav>
    </header>

    <main class="site-main">
      <slot />
    </main>

    <footer class="site-footer">
      <div class="container footer-content">
        <div class="footer-left">
          <p class="footer-copy"> {year} Portfolio. Crafted with care.</p>
        </div>
        <div class="footer-right">
          <a href="https://github.com" class="social-link" aria-label="GitHub">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"/>
            </svg>
          </a>
          <a href="https://linkedin.com" class="social-link" aria-label="LinkedIn">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"/>
              <rect x="2" y="9" width="4" height="12"/>
              <circle cx="4" cy="4" r="2"/>
            </svg>
          </a>
          <a href="https://twitter.com" class="social-link" aria-label="Twitter">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"/>
            </svg>
          </a>
        </div>
      </div>
    </footer>

    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const links = Array.from(document.querySelectorAll('header .nav a'));
        const sections = links
          .map((a) => {
            const href = a.getAttribute('href') || '';
            const id = href.replace('/#', '').replace('#', '');
            return document.getElementById(id);
          })
          .filter(Boolean);

        const setActive = (id) => {
          links.forEach((a) => {
            const href = a.getAttribute('href') || '';
            const match = href.endsWith('#' + id) || href === '#' + id;
            a.classList.toggle('active', match);
            if (match) a.setAttribute('aria-current', 'page');
            else a.removeAttribute('aria-current');
          });
        };

        const io = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) setActive(entry.target.id);
            });
          },
          { rootMargin: '-20% 0px -65% 0px', threshold: 0.1 }
        );
        sections.forEach((s) => io.observe(s));

        // Reveal on scroll
        const revealEls = document.querySelectorAll('.reveal');
        const ro = new IntersectionObserver(
          (entries, obs) => {
            entries.forEach((entry) => {
              if (!entry.isIntersecting) return;
              entry.target.classList.add('revealed');
              obs.unobserve(entry.target);
            });
          },
          { rootMargin: '0px 0px -10% 0px', threshold: 0.1 }
        );
        revealEls.forEach((el) => ro.observe(el));
        
        // Mobile menu toggle
        const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
        const mobileNav = document.querySelector('.mobile-nav');
        const body = document.body;
        
        if (mobileMenuBtn && mobileNav) {
          mobileMenuBtn.addEventListener('click', () => {
            const isOpen = mobileMenuBtn.getAttribute('aria-expanded') === 'true';
            mobileMenuBtn.setAttribute('aria-expanded', !isOpen);
            mobileMenuBtn.classList.toggle('active');
            mobileNav.classList.toggle('active');
            body.classList.toggle('menu-open');
          });
          
          // Close menu on link click
          mobileNav.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
              mobileMenuBtn.setAttribute('aria-expanded', 'false');
              mobileMenuBtn.classList.remove('active');
              mobileNav.classList.remove('active');
              body.classList.remove('menu-open');
            });
          });
        }
      });
    </script>
    <script>
      // Mobile menu toggle
      const menuToggle = document.getElementById('mobile-menu-toggle');
      const mobileMenu = document.getElementById('mobile-menu');
      
      menuToggle?.addEventListener('click', () => {
        mobileMenu?.classList.toggle('active');
        document.body.classList.toggle('menu-open');
      });

      // Close menu on link click
      mobileMenu?.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu?.classList.remove('active');
          document.body.classList.remove('menu-open');
        });
      });

      // Header scroll effect
      const header = document.querySelector('.site-header');
      let lastScroll = 0;
      
      window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset;
        
        if (currentScroll > 100) {
          header?.classList.add('scrolled');
        } else {
          header?.classList.remove('scrolled');
        }
        
        lastScroll = currentScroll;
      });

      // Scroll animations with Intersection Observer
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('in-view');
            
            // Stagger animations for children
            const children = entry.target.querySelectorAll('.animate-child');
            children.forEach((child, index) => {
              setTimeout(() => {
                child.classList.add('in-view');
              }, index * 100);
            });
          }
        });
      }, observerOptions);

      // Observe elements with animation classes
      document.addEventListener('DOMContentLoaded', () => {
        const animatedElements = document.querySelectorAll('.fade-in, .slide-up, .scale-in, .project-card, .skill-card');
        animatedElements.forEach(el => observer.observe(el));
      });

      // Smooth scroll for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const target = document.querySelector(anchor.getAttribute('href') || '');
          target?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        });
      });
    </script>
  </body>
</html>

<style>
  :root {
    --bg: #fff7f4;
    --surface: #ffffff;
    --text: #1b1b1b;
    --muted: #6b7280;
    --stroke: #f3ddd3;
    --peach-100: #ffece5;
    --peach-200: #ffe1d6;
    --peach-300: #ffc8b9;
    --peach-400: #ffb199;
    --peach-500: #ff8e72;
    --accent: var(--peach-500);
  }

  * { box-sizing: border-box; }
  html { scroll-behavior: smooth; }
  html, body { height: 100%; }
  body {
    margin: 0;
    color: var(--text);
    font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Apply peach radial background */
  body {
    background:
      radial-gradient(800px circle at 10% -10%, rgba(255, 180, 150, 0.18), transparent 60%),
      radial-gradient(1000px circle at 90% 0%, rgba(255, 208, 187, 0.20), transparent 60%),
      var(--bg);
  }

  a { color: inherit; text-decoration: none; }

  .container { max-width: 1100px; margin: 0 auto; padding: 0 24px; }

  .site-header {
    position: sticky; top: 0; z-index: 50;
    backdrop-filter: blur(10px) saturate(160%);
    background: rgba(255, 247, 244, 0.7);
    border-bottom: 1px solid var(--stroke);
  }
  .header-inner { display: flex; align-items: center; justify-content: space-between; height: 64px; }
  .brand { font-weight: 700; letter-spacing: -0.02em; }
  .nav { display: flex; gap: 12px; }
  .nav a { color: var(--muted); padding: 8px 10px; border-radius: 10px; border: 1px solid transparent; }
  .nav a:hover { color: var(--text); background: var(--peach-100); border-color: var(--stroke); }
  .nav a.active { color: var(--text); background: var(--peach-100); border-color: var(--peach-300); }

  .nav a:focus-visible, .btn:focus-visible { outline: none; box-shadow: 0 0 0 3px var(--peach-200); }
  ::selection { background: var(--peach-300); color: var(--text); }

  .reveal { opacity: 0; transform: translateY(10px); transition: opacity 320ms ease, transform 420ms cubic-bezier(.2,.6,.2,1); }
  .reveal.show { opacity: 1; transform: none; }

  @media (prefers-reduced-motion: reduce) {
    * { transition: none !important; animation: none !important; }
  }

  .site-main { min-height: calc(100dvh - 64px - 72px); }
  .site-footer { border-top: 1px solid var(--stroke); padding: 16px 0; color: var(--muted); }
</style>
